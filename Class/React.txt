ReactDOM
  -to render what we have/jsx into the browser.
  ReactDOM.render(<h1>hello<h1/>, document.getElementById("root"))
  * what we want to render?
  * where we want to render?
  jsx element must have one parent element...
//Vite to create react app

index.js - ReactDOM.render(<h1><h1/>)
 - help us to render(Method ) sth like html to the screen

index.html 
 - the root of the entire ap plication.
//props


//maps 

a method in every array 
takes a function as a parameter and what ever is returned from that function will be placed in the same index of a brand new array.
we can use it to convert raw data into an array of JSX elements that can be desplayed on the page.  









~~~ Vite
Development File structure...(could be JS files- classes,functions, imports exports, packages, npm module, css,---> large development source code. => Bundler => it takes all of that and bundle it up into single js file(called bundle.js or main.js, this would be the production build (what CRA does so far using webpack under the hood. the issue is when we make a change it goes to the bundling process every single time...as the app grows and more packages installed it gets slow ) ) )
 ~ a build tool, to bundle large file structure in to a production JS then to include it in browser.
 ~ vite doesn't rebundle everything everytime we make changes
 ~ it is a dev server rather than module bundler
 ~ we don't need to bundle everything before starting the server. we can start the server and see our changes in the browser immediately and we don't have to wait for the files to be bundled.
 ~ it update the browser in real-time

 ~ npm create vite@latest my-vite-app
 ~ 

Arrray Destructuring: let [a, b] = [10, 20]

var hero = {
  name: 'Sarry',
  realName: 'Saron'
}


// using object Destructuring _ It's equivalent to

var {name, realName} = hero











 *** Props
  -make comonents reusable. 

  - function addNum (){
    return 1+2
  }
  function addNum (a, b){
    return a+b
  }....Reusable
Object Destructuring: 

*** We can insert values from js in jsx
*** the things we write inside of curley braces will be run as regulat js
*** out side or return 




***** The return statement can only be used within function bodies
In a plain function, the call to that function evaluates to the return value.
In an async function, the produced promise is resolved with the returned value.



States
******

JS Object that holds info that influences the o/p of render

* Props is sth passed to the component like parameter in function // from the parent to the child
 -cann't be changed by the component.
* State is like a variable with in the component
 - can be changed by the component
 - used when we want to keep track of information during multiple rendering of a component 

 Update Class state values
 *************************

 setState() method in React.Component already defined.

LifeCycle Methods ---- 
LifeCycle- Birth - Death
         - Mounting - whenever a component is added and rendered on DOM
         - Update - when the state of the component changes
         - Unmount - whenever the component added on DOM is removed.

https://www.w3schools.com/react/react_lifecycle.asp



Questions
// Can I use state and props interchangeably???



Hooks

* works only inside functional component.
* only call hooks at top levels.
* 
--- useState()
